import folium

from openrouteservice import client

import fiona as fn
from shapely.geometry import Polygon, mapping, MultiPolygon, LineString, Point
from shapely.ops import cascaded_union

import pyproj


#insert your ORS api key
api_key = '5b3ce3597851110001cf62489766727e63d84f6e8e2ea2b05ec3930f'
ors = client.Client(key=api_key)

# Twitter data from 2013
#tweet_file = 'tweets/tweets_magdeburg.shp'
tweet_file = r'D:\001\convertcsv.geojson'

# Function to create buffer around tweet point geometries and transform it to the needed coordinate system (WGS84)
def CreateBufferPolygon(point_in, resolution=2, radius=20):
    sr_wgs = pyproj.Proj(init='epsg:4326')  # WGS84
    sr_utm = pyproj.Proj(init='epsg:32632')  # UTM32N
    point_in_proj = pyproj.transform(sr_wgs, sr_utm, *point_in)  # Unpack list to arguments
    point_buffer_proj = Point(point_in_proj).buffer(radius, resolution=resolution)  # 20 m buffer

    # Iterate over all points in buffer and build polygon
    poly_wgs = []
    for point in point_buffer_proj.exterior.coords:
        poly_wgs.append(pyproj.transform(sr_utm, sr_wgs, *point))  # Transform back to WGS84

    return poly_wgs




# Function to request directions with avoided_polygon feature
def CreateRoute(avoided_point_list, n=0):
    route_request = {'coordinates': coordinates,
                     'format_out': 'geojson',
                     'profile': 'driving-car',
                     'preference': 'shortest',
                     'instructions': False,
                     'options': {'avoid_polygons': mapping(MultiPolygon(avoided_point_list))}}
    route_directions = ors.directions(**route_request)

    return route_directions


# Function to create buffer around requested route
def CreateBuffer(route_directions):
    line_tup = []
    for line in route_directions['features'][0]['geometry']['coordinates']:
        tup_format = tuple(line)
        line_tup.append(tup_format)

    new_linestring = LineString(line_tup)
    dilated_route = new_linestring.buffer(0.001)

    return dilated_route


map_tweet = folium.Map(tiles='Stamen Toner', location=([22.54475,114.05609]), zoom_start=14)  # Create map


def style_function(color):  # To style data
    return lambda feature: dict(color=color)


counter = 0
flood_tweets = []  # Flood affected tweets
tweet_geometry = []  # Simplify geometry of tweet buffer polygons
with fn.open(tweet_file, 'r') as tweet_data:  # Open data in reading mode
    print('{} tweets in total available.'.format(len(tweet_data)))
    for data in tweet_data:
        folium.Marker(list(reversed(data['geometry']['coordinates'])),
                      popup=data['properties']['name']).add_to(map_tweet)
        # Create buffer polygons around affected sites with 200 m radius and low resolution
        flood_tweet = CreateBufferPolygon(data['geometry']['coordinates'],
                                              resolution=2,  # low resolution to keep polygons lean
                                              radius=1000)
        flood_tweets.append(flood_tweet)
        # Create simplify geometry and merge overlapping buffer regions
        poly = Polygon(flood_tweet)
        tweet_geometry.append(poly)
union_poly = mapping(cascaded_union(tweet_geometry))
folium.features.GeoJson(data=union_poly,
                        name='Flood affected areas',
                        style_function=style_function('#ffd699'), ).add_to(map_tweet)

#print('{} regular tweets with no flood information avalibale.'.format(counter))
print(len(flood_tweets), 'tweets with flood information available.')

# map_tweet.save(os.path.join('results', '1_tweets.html'))
map_tweet



# Visualize start and destination point on map
coordinates = [[22.5362,114.0427], [22.52001,114.05317]]  # 高尔夫俱乐部 and 皇岗公园
for coord in coordinates:
    folium.map.Marker(list(reversed(coord))).add_to(map_tweet)